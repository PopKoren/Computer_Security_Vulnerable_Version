{"ast":null,"code":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './RegisterForm.css';\nimport { validatePassword } from '../utils/validation';\nconst RegisterForm = () => {\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setLoading(true);\n    const passwordValidation = validatePassword(formData.password);\n    if (!passwordValidation.isValid) {\n      setError(passwordValidation.message);\n      setLoading(false);\n      return;\n    }\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:8000/api/register/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          username: formData.username,\n          email: formData.email,\n          password: formData.password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Registration failed');\n      }\n      navigate('/login');\n    } catch (err) {\n      setError(err.message || 'Failed to connect to server');\n    } finally {\n      setLoading(false);\n    }\n  };\n};","map":{"version":3,"names":["React","useState","useNavigate","validatePassword","RegisterForm","navigate","formData","setFormData","username","email","password","confirmPassword","error","setError","loading","setLoading","handleSubmit","e","preventDefault","passwordValidation","isValid","message","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","err"],"sources":["C:/Users/koren/OneDrive/Desktop/Project1/Frontend/src/components/RegisterForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './RegisterForm.css';\r\nimport { validatePassword } from '../utils/validation';\r\n\r\nconst RegisterForm = () => {\r\n  const navigate = useNavigate();\r\n  const [formData, setFormData] = useState({\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: ''\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setLoading(true);\r\n\r\n    const passwordValidation = validatePassword(formData.password);\r\n    if (!passwordValidation.isValid) {\r\n      setError(passwordValidation.message);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (formData.password !== formData.confirmPassword) {\r\n      setError('Passwords do not match');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8000/api/register/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          username: formData.username,\r\n          email: formData.email,\r\n          password: formData.password\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Registration failed');\r\n      }\r\n\r\n      navigate('/login');\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to connect to server');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,oBAAoB;AAC3B,SAASC,gBAAgB,QAAQ,qBAAqB;AAEtD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,QAAQ,GAAGH,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC;IACvCO,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,eAAe,EAAE;EACnB,CAAC,CAAC;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMe,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBL,QAAQ,CAAC,EAAE,CAAC;IACZE,UAAU,CAAC,IAAI,CAAC;IAEhB,MAAMI,kBAAkB,GAAGhB,gBAAgB,CAACG,QAAQ,CAACI,QAAQ,CAAC;IAC9D,IAAI,CAACS,kBAAkB,CAACC,OAAO,EAAE;MAC/BP,QAAQ,CAACM,kBAAkB,CAACE,OAAO,CAAC;MACpCN,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IAEA,IAAIT,QAAQ,CAACI,QAAQ,KAAKJ,QAAQ,CAACK,eAAe,EAAE;MAClDE,QAAQ,CAAC,wBAAwB,CAAC;MAClCE,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IAEA,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE;QACZ,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBpB,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;UAC3BC,KAAK,EAAEH,QAAQ,CAACG,KAAK;UACrBC,QAAQ,EAAEJ,QAAQ,CAACI;QACrB,CAAC;MACH,CAAC,CAAC;MAEF,MAAMmB,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACjB,KAAK,IAAI,qBAAqB,CAAC;MACtD;MAEAP,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,CAAC,OAAO4B,GAAG,EAAE;MACZpB,QAAQ,CAACoB,GAAG,CAACZ,OAAO,IAAI,6BAA6B,CAAC;IACxD,CAAC,SAAS;MACRN,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}